import {HorizontalBox, LineEdit, Button, ComboBox, GridBox , ScrollView,ListView, GroupBox} from "std-widgets.slint";


export struct UIFile{
	name: string,
	fullPath: string,
	icon: image,
}
export struct UIDirectoryInfo{
	fullPath: string,
	files: [UIFile],
	status: string,
}
export struct UIPathComponent{
	fullPath: string,
	name: string,
}

component FileBox inherits TouchArea{
	in property <UIFile> data;
	in property <int> size;
	callback onFileOpen(string);
	
	property <bool> selected: false;
	
	mouse-cursor: pointer;
	
	fs:=FocusScope {
		key-pressed(event) => {
			// if(event.text == Key.UpArrow) {
			// 	return accept;
			// }
			
			// if(event.text == Key.RightArrow) {
			// 	return accept;
			// }
			
			// if(event.text == Key.LeftArrow) {
			// 	return accept;
			// }
			
			if (event.text == "\n") {
				onFileOpen(data.fullPath);
				return accept;
			}
			
			if (event.text == " ") {
				parent.clicked();
				return accept;
			}
			
			return reject;
		}
	}
	
	rect := Rectangle {
		property <float> transp: 0;
		
		border-width: 0px;
		border-color: rgba(0,0,0, 0.5);
		background:  rgba(0.5,0.5,0.5, transp);
		animate transp { duration: 70ms; }
		animate border-width { duration: 200ms; }
		
		states [
			focused when fs.has-focus: {
				rect.border-width: 2px;
			}
		 ]
	}
	VerticalLayout {
		property <length> padd: 5px;
		
		Image {
			property <length> siz: size*1px-padd*2;
			
			source: data.icon;
			height: min(siz*(data.icon.height/data.icon.width), siz*(data.icon.width/data.icon.height));
		}
		txt:=Text {
			text:data.name;
			vertical-alignment: center;
			horizontal-alignment: center;
			wrap: word-wrap;
		}
		padding: padd;
		padding-bottom: padd*2/3;
		spacing: padd/2;
	}
	
	clicked => {
		if(selected){
			onFileOpen(data.fullPath);
		}
		selected=!selected;
	}
	
	
	max-height: size*1px;
	width: size*1px;
	
	states [ 
		pressed when root.pressed: {
			rect.transp: 0.4;
		}
		hover when root.has-hover: {
			rect.transp: 0.2;
		}
		selectedState when selected:{
			rect.transp: 0.4;
		}
	]
}

export global Logic {
    pure callback makeComponents(string) -> [UIPathComponent];
    pure callback separator() -> string;
}

component PathComponent{
	in property <UIPathComponent> data;
	callback clickedPath(string);
	
	Rectangle {
		// width: parent.width;
		// height: parent.height;
		
		property <float> transp: 0.0;
		
		background: rgba(0.5,0.5,0.5, transp);
		
		animate transp { duration: 70ms; }
		
		states [
			focused when ta.has-hover: {
				transp: 0.4;
			}
		 ]
	}
	
	txt:=Text{
		vertical-alignment: center;
		height: parent.height;
		text: data.name;
	}
	
	ta:=TouchArea{
		mouse-cursor: pointer;
		clicked => {
			clickedPath(data.fullPath);
		}
	}
	
	width: txt.width+6px;
}

component PathEditor{
	in property <string> path;
	callback accepted(string);
	callback onSegmentClicked(string);
	height: 36px;
	
	horizontal-stretch: 1;
	vertical-stretch: 0;
	
	property <bool> editing;
	
	ta:=TouchArea {
		clicked => {
			editing=!editing;
			le.focus();
			le.text=path;
		}
	}
	
	le:=TextInput {
		height: parent.height;
		text: path;
		
		vertical-alignment: center;
		
		x: ta.x + 8px;
		width: txt.min-width +8px;
		
		visible: editing;
		
		accepted => {
			parent.accepted(self.text);
			editing=false;
		}
	}
	
	txt := Text {
		font-weight: 600;
		text <=>le.text;
		visible: false;
	}
	
	if !editing:HorizontalLayout{
		alignment: start;
		spacing: -2px;
		padding: 3px;
		
		property <string> separator: Logic.separator();
		
		for comp in Logic.makeComponents(path):HorizontalLayout{
			spacing: parent.spacing;
			alignment: center;
			
			PathComponent{
				data: comp;
				clickedPath(path)=>{
					onSegmentClicked(path);
				}
			}
			Text{
				vertical-alignment: center;
				text: separator;
			}
		}
	}
	
	
}

component FileArea{
	in property <UIDirectoryInfo> info;
	//in property <bool> boxView;
	in property <int> boxSize;
	in property <image> loadIcon;
	
	callback onFileOpen(string);
	
	horizontal-stretch: 1;
	vertical-stretch: 1;
	
	VerticalLayout {
		HorizontalLayout {
			
			if loadIcon.width==0:Text {
				width: 50px;
				text: "Path: ";
				vertical-alignment: center;
				horizontal-alignment: center;
				
			}
			if loadIcon.width!=0:HorizontalLayout{
				width: 50px;
				Rectangle {}
				img:=Image {
					source: loadIcon;
				}
				Rectangle {}
			}
			
			le:=PathEditor {
				path: info.fullPath;
				accepted(text) => { 
					onFileOpen(text);
					le.path=info.fullPath;
				}
				onSegmentClicked(path) => {
					onFileOpen(path);
					le.path=info.fullPath;
				}
			}
		}
		
		if info.files.length==0:VerticalLayout{
			VerticalLayout {
				padding: 15px;
				Rectangle {}
				 Text{
					horizontal-alignment: center;
					text: "Nothing to display right now:";
					font-size: 19px;
				}
				Text{
					horizontal-alignment: center;
					font-size: 25px;
					text: info.status;
					wrap: word-wrap;
				}
				Rectangle {}
			}
		}
		
		if info.files.length > 0: ScrollView {
			
			property <int> freeSpace: self.width/1px - (16+20);
			property <int> columns: floor(freeSpace/(boxSize+15));
			
			
			VerticalLayout {
				padding: 10px;
				spacing: 10px;
				
				property <[UIFile]> files: info.files;
				property <int> rows: ceil(files.length/columns);
				property <length> inBetween: rows==1 ? 10px : (freeSpace - boxSize*columns)/(columns+1)*1px;
				
				// Text {text:" columns. "+columns+" rows: "+rows+" inBetween: "+inBetween/1px;}
				
				property<int> max:50;
				
				
				if files.length <= max:VerticalLayout{
					for row in rows: HorizontalLayout{
						spacing: inBetween;
						Rectangle {
							width:0px;
						}
						for column in columns: VerticalLayout{
							alignment: end;
							// Text {text:"row "+row+" column "+column+ " idx "+(column+row*columns);}
							if column+row*columns < files.length:
							FileBox {
								data: files[column+row*columns];
								size: boxSize;
								onFileOpen(d) => {
									onFileOpen(d);
									le.path=info.fullPath;
								}
							}
						}
					}
				}
				
				if files.length > max:Rectangle {
					width:10px;
					height: rows*(boxSize + 30)*1px+10px;
					
					for i in info.files.length:FileBox {
						data: files[i];
						size: boxSize;
						onFileOpen(d) => {
							onFileOpen(d);
							le.path=info.fullPath;
						}
						
						x: mod(i, columns)*(boxSize + inBetween/1px)*1px + inBetween;
						y: floor(i/columns)*(boxSize + 30)*1px;
						height: (boxSize+20)*1px;
					}
				}
				
				Rectangle {}
			}
		}
	}
	
	Rectangle {}
}

export component HomeApp inherits Window {
	
	in property <UIDirectoryInfo> data: {
		files: [],
		fullPath: "",
		status: "The default directory could not be loaded. Something is very wrong."
	};
	
	callback onFileOpen(string);
	
	default-font-size: 15px;
	
	preferred-width: 800px;
	preferred-height: 600px;
	
	title: "Rexplorer";
	
	in property <image> loadIcon;
	
	icon: @image-url("./icon.png");
	
	VerticalLayout{
		HorizontalLayout {
			Button {
				text:"button idk";
			}
			Button {
				text:"there will be stuff here";
			}
			Rectangle {}
		}
		
		FileArea{
			loadIcon<=>loadIcon;
			info: data;
			boxSize: 120;
			onFileOpen(d) => {
				onFileOpen(d);
			}
		}
		Text {text: "Bottom text";}
	}
}
